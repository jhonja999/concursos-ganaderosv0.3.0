generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------------------------------------------------
// ENUMERACIONES
// ---------------------------------------------------------

/// Sexo del ganado (solo MACHO/HEMBRA)
enum Sexo {
  MACHO
  HEMBRA
  SIN_RESTRICCION
}

/// Estado de pedido (si usas parte e-commerce)
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

/// Rol de usuario
enum Role {
  USER
  ADMIN
}

/// Tipos de concurso
enum ContestType {
  LIVESTOCK
  COFFEE_PRODUCTS
  GENERAL_PRODUCTS
}

/// Estados de concurso
enum ContestStatus {
  DRAFT
  REGISTRATION_OPEN
  REGISTRATION_CLOSED
  JUDGING
  COMPLETED
  CANCELLED
}

/// Roles específicos para concursos
enum ContestRole {
  CONTEST_ADMINISTRATOR
  JUDGE
  PARTICIPANT
  PUBLIC_VIEWER
}

/// Estados de participación
enum ParticipationStatus {
  PENDING
  APPROVED
  REJECTED
  WITHDRAWN
}

/// Estados de entrada/submission
enum SubmissionStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  JUDGED
  DISQUALIFIED
}

// ---------------------------------------------------------
// MODELO DE USUARIO (opcional, si usas Clerk con un clerkId)
// ---------------------------------------------------------
model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  auth0Id   String?  @unique // Add Auth0 support
  nombre    String?
  email     String   @unique
  slug      String?  @unique
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Contest-related relationships
  contestRoles      ContestUserRole[]
  participations    ContestParticipation[]
  submissions       ContestSubmission[]
  judgingAssignments JudgingAssignment[]
  scores            JudgingScore[]

  // Existing relationships
  reviews   Review[]
  orders    Order[]
  wishlist  Wishlist[]
  cart      CartItem[]
  Contact   Contact[]
  Event     Event[]
}

// ---------------------------------------------------------
// NUEVOS MODELOS PARA SISTEMA DE CONCURSOS
// ---------------------------------------------------------

/// Modelo principal de concurso
model Contest {
  id                String        @id @default(cuid())
  name              String
  slug              String        @unique
  description       String?       @db.Text
  type              ContestType
  status            ContestStatus @default(DRAFT)
  
  // Fechas importantes
  registrationStart DateTime
  registrationEnd   DateTime
  contestStart      DateTime
  contestEnd        DateTime
  resultsPublished  DateTime?
  
  // Configuración
  maxParticipants   Int?
  entryFee          Float?        @default(0)
  rules             String?       @db.Text
  prizes            String?       @db.Text
  
  // Metadatos
  isPublic          Boolean       @default(true)
  isFeatured        Boolean       @default(false)
  bannerImage       String?
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relaciones
  companyId         String
  company           Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  categories        ContestCategory[]
  userRoles         ContestUserRole[]
  participations    ContestParticipation[]
  submissions       ContestSubmission[]
  judgingCriteria   JudgingCriteria[]
  judgingAssignments JudgingAssignment[]

  @@index([companyId])
  @@index([type])
  @@index([status])
}

/// Categorías específicas de cada concurso
model ContestCategory {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  order       Int      @default(0)
  
  // Restricciones específicas por tipo de concurso
  ageMin      Int?     // Para ganado: edad mínima en días
  ageMax      Int?     // Para ganado: edad máxima en días
  sexo        Sexo?    // Para ganado: restricción de sexo
  
  // Para productos de café y generales
  productType String?  // Tipo de producto específico
  weightMin   Float?   // Peso mínimo
  weightMax   Float?   // Peso máximo
  
  maxEntries  Int?     // Máximo de entradas por participante en esta categoría
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  contestId   String
  contest     Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)
  
  submissions ContestSubmission[]
  judgingCriteria JudgingCriteria[]

  @@index([contestId])
}

/// Roles de usuarios en concursos específicos
model ContestUserRole {
  id        String      @id @default(cuid())
  role      ContestRole
  assignedAt DateTime   @default(now())
  
  // Relaciones
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  contestId String
  contest   Contest     @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@unique([userId, contestId, role])
  @@index([userId])
  @@index([contestId])
}

/// Participaciones en concursos
model ContestParticipation {
  id              String              @id @default(cuid())
  status          ParticipationStatus @default(PENDING)
  registeredAt    DateTime            @default(now())
  approvedAt      DateTime?
  notes           String?             @db.Text
  
  // Relaciones
  userId          String
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  contestId       String
  contest         Contest             @relation(fields: [contestId], references: [id], onDelete: Cascade)
  
  submissions     ContestSubmission[]

  @@unique([userId, contestId])
  @@index([userId])
  @@index([contestId])
}

/// Entradas/submissions a concursos
model ContestSubmission {
  id              String           @id @default(cuid())
  title           String
  description     String?          @db.Text
  status          SubmissionStatus @default(DRAFT)
  
  // Metadatos específicos por tipo
  metadata        Json?            // Datos flexibles según el tipo de concurso
  
  submittedAt     DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relaciones
  participationId String
  participation   ContestParticipation @relation(fields: [participationId], references: [id], onDelete: Cascade)
  categoryId      String
  category        ContestCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  // Para ganado existente (compatibilidad)
  ganadoId        String?
  ganado          Ganado?          @relation(fields: [ganadoId], references: [id])
  
  media           SubmissionMedia[]
  scores          JudgingScore[]

  @@index([participationId])
  @@index([categoryId])
  @@index([ganadoId])
}

/// Media asociado a submissions
model SubmissionMedia {
  id           String   @id @default(cuid())
  type         String   // 'image', 'video', 'document'
  url          String
  filename     String
  mimeType     String
  size         Int
  isPrimary    Boolean  @default(false)
  caption      String?
  
  createdAt    DateTime @default(now())

  // Relaciones
  submissionId String
  submission   ContestSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

/// Criterios de evaluación
model JudgingCriteria {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  weight      Float    @default(1.0) // Peso del criterio en la puntuación final
  maxScore    Int      @default(100)
  order       Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  contestId   String?
  contest     Contest? @relation(fields: [contestId], references: [id], onDelete: Cascade)
  categoryId  String?
  category    ContestCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  scores      JudgingScore[]

  @@index([contestId])
  @@index([categoryId])
}

/// Asignaciones de jueces
model JudgingAssignment {
  id        String   @id @default(cuid())
  assignedAt DateTime @default(now())
  
  // Relaciones
  judgeId   String
  judge     User     @relation(fields: [judgeId], references: [id], onDelete: Cascade)
  contestId String
  contest   Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@unique([judgeId, contestId])
  @@index([judgeId])
  @@index([contestId])
}

/// Puntuaciones de jueces
model JudgingScore {
  id          String   @id @default(cuid())
  score       Float
  comments    String?  @db.Text
  
  scoredAt    DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  judgeId     String
  judge       User     @relation(fields: [judgeId], references: [id], onDelete: Cascade)
  submissionId String
  submission  ContestSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  criteriaId  String
  criteria    JudgingCriteria @relation(fields: [criteriaId], references: [id], onDelete: Cascade)

  @@unique([judgeId, submissionId, criteriaId])
  @@index([judgeId])
  @@index([submissionId])
  @@index([criteriaId])
}

// ---------------------------------------------------------
// MODELO DE COMPAÑÍA (EMPRESA) - ACTUALIZADO
// ---------------------------------------------------------
model Company {
  id          String    @id @default(cuid())
  nombre      String  
  slug        String    @unique
  logo        String?    
  descripcion String?
  ubicacion   String?
  website     String?
  isFeatured  Boolean   @default(false)
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relaciones existentes
  concursos Concurso[]
  contacts  Contact[]
  events    Event[]
  products  Product[]
  
  // Nueva relación con concursos del nuevo sistema
  contests  Contest[]
}

// ---------------------------------------------------------
// MODELO DE CONCURSO EXISTENTE - MANTENIDO PARA COMPATIBILIDAD
// ---------------------------------------------------------
model Concurso {
  id          String   @id @default(cuid())
  nombre      String
  descripcion String?
  slug        String   @unique
  fechaInicio DateTime
  fechaFin    DateTime?
  isFeatured  Boolean  @default(false)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  ganadoEnConcurso GanadoEnConcurso[]
  categorias ConcursoCategoria[]

  @@index([companyId])
}

// ---------------------------------------------------------
// MODELO DE CATEGORÍA DE CONCURSO EXISTENTE
// ---------------------------------------------------------
model ConcursoCategoria {
  id          String   @id @default(cuid())
  nombre      String
  descripcion String?
  orden       Int      @default(0)
  sexo        Sexo?
  edadMinima  Int?
  edadMaxima  Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  concursoId  String
  concurso    Concurso @relation(fields: [concursoId], references: [id], onDelete: Cascade)
  
  ganado      Ganado[]

  @@index([concursoId])
}

// ---------------------------------------------------------
// MODELO DE GANADO - ACTUALIZADO
// ---------------------------------------------------------
model Ganado {
  id           String   @id @default(cuid()) @map("_id")
  nombre       String
  slug         String   @unique
  fechaNac     DateTime?
  categoria    String?
  subcategoria String?
  establo      String?
  remate       Boolean?
  propietario  String?
  descripcion  String?
  raza         String?
  sexo         Sexo
  numRegistro  String?      
  puntaje      Int?
  isFeatured   Boolean      @default(false)
  isPublished  Boolean      @default(false)
  isGanadora   Boolean      @default(false)
  premios      String[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  ganadoEnConcurso GanadoEnConcurso[]

  criadorId    String?
  criador      Criador?     @relation(fields: [criadorId], references: [id])
  
  categoriaConcursoId String?
  categoriaConcurso   ConcursoCategoria? @relation(fields: [categoriaConcursoId], references: [id])

  GanadoImage GanadoImage[]
  
  // Nueva relación con submissions del nuevo sistema
  contestSubmissions ContestSubmission[]

  @@index([criadorId])
  @@index([categoriaConcursoId])
}

// ---------------------------------------------------------
// RESTO DE MODELOS EXISTENTES (SIN CAMBIOS)
// ---------------------------------------------------------

model Criador {
  id          String   @id @default(cuid())
  nombre      String
  apellido    String?
  empresa     String?
  telefono    String?
  email       String?
  direccion   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  ganado      Ganado[]
}

model GanadoEnConcurso {
  id         String   @id @default(cuid())
  ganadoId   String
  concursoId String
  posicion   Int?
  creadoAt   DateTime @default(now())
  
  ganado     Ganado   @relation(fields: [ganadoId], references: [id], onDelete: Cascade)
  concurso   Concurso @relation(fields: [concursoId], references: [id], onDelete: Cascade)

  @@index([ganadoId])
  @@index([concursoId])
}

model Image {
  id        String   @id @default(cuid())
  url       String   @unique
  hash      String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  GanadoImage GanadoImage[]
}

model GanadoImage {
  id         String @id @default(cuid())
  ganadoId   String
  imageId    String
  principal  Boolean @default(false)
  createdAt  DateTime @default(now())

  ganado Ganado @relation(fields: [ganadoId], references: [id], onDelete: Cascade)
  image  Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@unique([ganadoId, imageId])
  @@index([ganadoId])
  @@index([imageId])
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  role      String   @default("employee")
  startDate DateTime
  companyId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  User    User[]

  @@index([companyId])
  @@index([userId])
}

model Event {
  id          String   @id @default(cuid())
  companyId   String
  companyName String?
  title       String
  description String?
  start       DateTime
  allDay      Boolean
  timeFormat  String
  endDate     DateTime?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id])
  User    User[]

  @@index([companyId])
}

model Category {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  description String?      @db.Text
  image       String?
  parentId    String?
  parent      Category?    @relation("SubCategories", fields: [parentId], references: [id])
  subCategories Category[] @relation("SubCategories")
  featured    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  Product Product[]
}

model Product {
  id           String      @id @default(cuid())
  name         String
  slug         String      @unique
  description  String?     @db.Text
  price        Float
  comparePrice Float?
  images       String[]
  videos       String[]
  ingredients  String?     @db.Text
  companyId    String
  categoryId   String
  variants     Variant[]
  attributes   Attribute[]
  reviews      Review[]
  orderItems   OrderItem[]
  wishlist     Wishlist[]
  cartItems    CartItem[]
  isFeatured   Boolean     @default(false)
  isPublished  Boolean     @default(false)
  stock        Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  company  Company  @relation(fields: [companyId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@index([companyId])
  @@index([categoryId])
}

model Variant {
  id        String   @id @default(cuid())
  name      String
  price     Float
  sku       String?
  stock     Int      @default(0)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Attribute {
  id        String   @id @default(cuid())
  name      String
  value     String
  imageUrl  String?
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?  @db.Text
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([productId])
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  status    OrderStatus @default(PENDING)
  total     Float
  items     OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  orderId   String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}